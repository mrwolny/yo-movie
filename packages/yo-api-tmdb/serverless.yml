service: yo-api-tmdb

frameworkVersion: ">=1.35.0 <2.0.0"

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  tableName: ${self:custom.stage}-YoMovieConfigTable

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

  environment:
    STAGE: ${self:custom.stage}
    API_KEY: ${env:API_KEY, ssm:/${self:custom.stage}/yo-movie/tmdb/apiKey}
    API_BASE_URL: ${env:API_BASE_URL, ssm:/${self:custom.stage}/yo-movie/tmdb/apiBaseUrl}
    CONFIG_TTL: ${env:CONFIG_TTL, ssm:/${self:custom.stage}/yo-movie/tmdb/configTimeToLive}
    DDB_TABLE_NAME: ${env:DDB_TABLE_NAME, self:custom.tableName}

  apiGateway:
    restApiId:
      Fn::ImportValue: ${self:custom.stage}-YoMovieApiGatewayRestApiId
    restApiRootResourceId:
      Fn::ImportValue: ${self:custom.stage}-YoMovieApiGatewayRestApiRootResourceId

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [ YoMovieConfigTable, Arn ]

functions:
  hello:
    handler: handler.config
    events:
      - http:
          path: tmdb/config
          method: get

resources:
  Resources:
    YoMovieConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stage}-YoMovieConfigTable
        AttributeDefinitions:
          - AttributeName: Key
            AttributeType: S
        KeySchema:
          - AttributeName: Key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: TimeToLive
          Enabled: 'false'
